# How to generate graphQL code.
# go run github.com/99designs/gqlgen 
# or
# make production-code

# Query
# Response data format
type Token {
    value: String!
    errors: [ERRORS]
}

# Re:sns
# Response data format
type UserInfo {
    info: User!
    errors: [ERRORS]
}

type User {
    name: String!
    birthday: Date!
    gender: Int!
    genre: [String]
}

type Date {
    year: Int!
    month: Int!
    day: Int!
}

type Nice {
    nice: Int!
    errors: [ERRORS]
}

type List {
    articles: [ArticleHeader]
    errors: [ERRORS]
}

type ArticleHeader {
    id: String!
    title: String!
    ImagePath: String!
    tags: [String]
    synopsis: String!
    nice: Int!
}

type Genres {
    genres: [String!]
    errors: [ERRORS]
}

type Articles {
    articles: [ArticleHeader]
    errors: [ERRORS]
}

type Article {
    info: ArticleInfo
    errors: [ERRORS]
}

type ArticleInfo {
    title: String!
    imagePath: String!
    nice: Int!
    context: String!
    userStatus: ArticleUserInfo
    tags: [String]
    comments: [Comment]
}

type ArticleUserInfo {
    nice: Boolean!
    list: Boolean!
}

type Comment {
    userName: String!
    userImage: String!
    contents: String!
}

# めりはりこ
# Response data format
type Log {
    log: LogInfo
    errors: [ERRORS]
}

type LogInfo {
    id: String!
    title: String!
    date: String!
    worktime: Int!
    concentration: [Float!]
}

type Logs {
    logs: [LogData]
    errors: [ERRORS]
}

type LogData {
    id: String!
    title: String!
}

# 未知しるべ
# Response data format
type Spots {
    spot: Spot
    detour: [Detour]
    errors: [ERRORS]
}

type Spot {
    id: String!
    name: String!
    locate: Locate
}

type Detour {
    id: String!
    name: String!
    image: String!
    Description: String!
    locate: Locate
}

type Locate {
    latitude: Float!
    longitude: Float!
}

# Mutation
# Response data format
type Result {
    status: Boolean!
    errors: [ERRORS]
}

type ERRORS {
    code: Int!
    message: String!
    description: String!
}

# Query List
type Query {
    ## ユーザー認証
    signin: Token!
    # Re:sns
    ## ユーザー情報取得
    userInfo: UserInfo!
    nice(nice: Int): Nice!
    list: List!
    ## 記事取得
    genres: Genres!
    articles(genre: String!, year: Int, month: Int): Articles!
    articlesFromTag(tag: String!): Articles!
    article(articleid: String!): Article!
    # めりはりこ
    ## ログ取得
    log(logid: String!): Log!
    logs: Logs!
    # 未知しるべ
    spots(latitude: Float!, longitude: Float!, worktime: Int!, emotion: Int!): Spots! 
}

# Mutation List
type Mutation {
    ## ユーザー登録
    signup: Token!
    # Re:sns
    ## ユーザー情報を登録
    addConstantUserInfo(gender: Int!, year: Int!, month: Int!, date: Int!): Result!
    addName(name: String!): Result!
    addGenre(genre: [String]!): Result!
    ## リスト管理
    addNice(articleid: String): Nice!
    addList(articleid: String): Result!
    delList(articleid: String): Result!
    addRequest(genre: String, year: Int, month: Int, title: String, contents: String): Result!
    ## コメント登録
    addComment(articleid: String, comment: String): Result!
    # めりはりこ
    addNewLogData(id: String!, date: String!, title: String!, worktime: Int!, concentration: [Float!]!): Result!
    addSubscription: Result!
    # 未知しるべ
    addEvaluation(spotid: String!, emotion: Int!, status: Boolean!): Result!
    addSpot(name: String!, description: String!, image: String!, latitude: Float!, longitude: Float!): Result!
}
